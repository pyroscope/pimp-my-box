---
# ansible_architecture: "x86_64" or "armv7l"
- name: Load distro-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "os_{{ ansible_lsb.codename }}_{{ ansible_architecture }}.yml"
    - "os_{{ ansible_distribution_release }}.yml"
    - "os_default.yml"

- name: Download rTorrent-PS Debian package
  get_url: dest="/root/{{ rtps_deb_url.split('/')[-1] }}" url="{{ rtps_deb_url }}" validate_certs=no
  # 2.0 only - checksum="{{ rtps_deb_SHA }}"
  when: 'not(rtps_deb_url == "")'

- name: Install rTorrent-PS Debian package
  shell: >
    dpkg -i "{{ rtps_deb_url.split('/')[-1] }}" && touch /opt/rtorrent/pmb-installed
  args:
    chdir: /root
    creates: /opt/rtorrent/pmb-installed
  when: 'not(rtps_deb_url == "")'

- name: Unavailable rTorrent-PS Debian package?
  debug: msg="WARNING - No DEB package URL defined for {{ ansible_distribution_release }}, you need to install /opt/rtorrent manually!"
  when: 'rtps_deb_url == ""'

- name: Install runtime dependencies for rTorrent-PS
  apt: name={{ item }} state=latest
  with_items:
    - tmux
    - locales

- name: Install build tools for rTorrent-PS
  apt: name={{ item }} state=latest
  with_items:
    - git
    - wget
    - build-essential
    - libtool
    - autoconf
    - automake

- name: Install build dependencies for rTorrent-PS
  apt: name={{ item }} state=latest
  with_items:
    - libssl-dev
    - libcppunit-dev
    - libncurses5-dev
    - libncursesw5-dev
    - libsigc++-2.0-dev

- name: Create rtorrent group
  group: name=rtorrent state=present
  group: name={{ rt_user  }} state=present

- name: Create rtorrent user
  user: name={{ rt_user  }} comment="{{ rt_user  }} rTorrent" group={{ rt_user  }} groups=users append=yes shell=/bin/bash

- name: Create rtorrent home directory
  file: path=/home/{{ rt_user  }} state=directory owner={{ rt_user  }} group={{ rt_user  }} mode=0750

- name: Create rtorrent home subdirs
  file: path=/home/{{ rt_user  }}/{{ item }} state=directory owner={{ rt_user  }} group={{ rt_user  }} mode=0750
  with_items:
    - bin
    - etc
    - lib
    - rtorrent
    - rtorrent/.session
    - rtorrent/rtorrent.d
    - rtorrent/backups
    - rtorrent/done
    - rtorrent/log
    - rtorrent/watch
    - rtorrent/watch/load
    - rtorrent/watch/start
    - rtorrent/watch/hdtv
    - rtorrent/work
    - src
    - tmp
    - .config
    - .local
    - .local/lib
    - .local/profile.d

- name: Copy rtorrent dot files
  copy: src=dotfiles/{{ item.name }} dest=/home/{{ rt_user  }}/.{{ item.name }} owner={{ rt_user  }} group={{ rt_user  }} mode=0640 force={{ item.force }}
  with_items:
    - { name: bash_aliases, force: yes }
    - { name: tmux.conf, force: no }

- name: Copy rtorrent scripts
  copy: src=bin/{{ item }} dest=/home/{{ rt_user  }}/bin/{{ item }} owner={{ rt_user  }} group={{ rt_user  }} mode=0750
  with_items:
    - _event.download.finished

- name: Render rtorrent bash helpers
  template: src=bin/{{ item }} dest=/home/{{ rt_user  }}/bin/{{ item }} owner={{ rt_user  }} group={{ rt_user  }} mode=0640
  with_items:
    - _tools.sh

- name: Create rtorrent /var symlink
  file: src=/home/{{ rt_user  }}/rtorrent path=/var/torrent state=link

- include: config.yml

- name: Install initial rtorrent crontab
  copy: src=crontab dest=/var/spool/cron/crontabs/{{ rt_user  }} owner={{ rt_user  }} group=crontab mode=0600 force=no

- name: Add rtorrent cron job 'rt_backup_session'
  cron: user={{ rt_user  }} minute=7 hour=0 name=rt_backup_session job="test ! -f ~/NOCRON && cd /var/torrent && tar cfz \"backups/session-$(date +'\%u').tgz\" .session/"
